---------------------------------------------------------------------------
--
-- pname.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2022, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/pname.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'pname' which represents
--	pname numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/pname$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/pname.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'pname_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'pname'
-- does not exist yet but that's okay.

CREATE FUNCTION pname_in(cstring)
   RETURNS PersonName
   AS '_OBJWD_/pname'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'pname_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION pname_out(PersonName)
   RETURNS cstring
   AS '_OBJWD_/pname'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE PersonName (
   internallength = variable,
   input = pname_in,
   output = pname_out
);


CREATE FUNCTION pname_eq(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_lt(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_gt(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_ne(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_ge(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_le(PersonName, PersonName) 
   RETURNS bool
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION family(PersonName) 
   RETURNS text
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION given(PersonName) 
   RETURNS text
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION show(PersonName) 
   RETURNS text
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_hash(PersonName) 
   RETURNS int32
   AS '_OBJWD_/pname' 
   LANGUAGE C IMMUTABLE STRICT;


CREATE OPERATOR = (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_eq,
   commutator = = , negator = <> ,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR <> (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_ne,
   commutator = <> , negator = = ,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR > (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR < (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);

CREATE OPERATOR >= (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);

CREATE OPERATOR <= (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);

CREATE OPERATOR CLASS pname_btree_ops
   DEFAULT FOR TYPE PersonName USING btree AS
      OPERATOR        1       <  (PersonName, PersonName),
      OPERATOR        2       <= (PersonName, PersonName),
      OPERATOR        3       =  (PersonName, PersonName),
      OPERATOR        4       >= (PersonName, PersonName),
      OPERATOR        5       >  (PersonName, PersonName);

CREATE OPERATOR CLASS pname_hash_ops
   DEFAULT FOR TYPE PersonName USING hash AS
      OPERATOR        1       = ,
      FUNCTION        1       pname_hash(PersonName);